plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.wispforest.io/releases/' }

    // 🔧 Добавлено для AutoConfig и ClothConfig
    maven { url 'https://maven.shedaniel.me/' }
}

dependencies {
    // 🔧 AutoConfig — сохранение данных между сессиями
    modImplementation "me.shedaniel.autoconfig:autoconfig-core:4.6.0"
    modImplementation "me.shedaniel.autoconfig:autoconfig-gson:4.6.0"

    // 🔧 ClothConfig — GUI конфиг (если используешь)
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:11.0.147"

    // Оригинальные зависимости
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:11.0.147"
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include implementation ('com.github.jagrosh:DiscordIPC:a8d6631')
    include implementation('org.json:json:20231013')
    include implementation('org.slf4j:slf4j-api:2.0.7')
    include implementation('com.kohlschutter.junixsocket:junixsocket-common:2.6.2')
    include implementation('com.kohlschutter.junixsocket:junixsocket-native-common:2.6.2')
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
   
shadowJar {
    archiveClassifier.set('all')
}
    }
}
