plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = project.maven_group
version = project.mod_version

// ---------------------------------------------------------------------------
// 1) Репозитории для зависимостей Fabric, AutoConfig, ClothConfig, JitPack и т.д.
// ---------------------------------------------------------------------------
repositories {
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' }     // Fabric Loader & API
    maven { url 'https://maven.shedaniel.me/' }    // AutoConfig & ClothConfig
    maven { url 'https://jitpack.io/' }            // JitPack (DiscordIPC и др.)
    maven { url 'https://maven.wispforest.io/releases/' } // Owo-lib / Sentinel
}

// -----------------------------
// 2) Зависимости вашего Fabric-мода
// -----------------------------
dependencies {
    // Minecraft & mappings & Fabric
    minecraft        "com.mojang:minecraft:${project.minecraft_version}"
    mappings         "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // AutoConfig (сохранение конфига)
    modImplementation "me.shedaniel.autoconfig:autoconfig-core:4.6.0"
    modImplementation "me.shedaniel.autoconfig:autoconfig-gson:4.6.0"

    // GUI-конфиг (Cloth Config, опционально)
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:11.0.147"

    // Discord IPC (JitPack)
    modImplementation "com.github.jagrosh:DiscordIPC:a8d6631"

    // Библиотеки, которые нужно упаковать внутрь JAR
    implementation "org.json:json:20231013"
    implementation "org.slf4j:slf4j-api:2.0.7"
    implementation "com.kohlschutter.junixsocket:junixsocket-common:2.6.2"
    implementation "com.kohlschutter.junixsocket:junixsocket-native-common:2.6.2"

    // Owo-lib (аннотационный процессор) и Owo-sentinel (runtime-only)
    modAnnotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    modRuntimeOnly        "io.wispforest:owo-sentinel:${project.owo_version}"
}

// --------------------------------------------------
// 3) Подстановка версии в fabric.mod.json и Character Set
// --------------------------------------------------
processResources {
    inputs.property "version", project.version
    filteringCharset = 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

// ---------------------------
// 4) Настройка компиляции Java
// ---------------------------
def targetJavaVersion = 21

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
    archivesBaseName = project.archives_base_name
    withSourcesJar()  // генерировать sources.jar
}

// ---------------------------
// 5) Добавляем лицензию в основной JAR
// ---------------------------
jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// ---------------------------
// 6) Конфигурация Shadow Jar
// ---------------------------
shadowJar {
    archiveClassifier.set('all')
}

// ---------------------------
// 7) Publishing (если нужно)
// ---------------------------
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        // сюда можно добавить Maven-репозиторий для публикации вашего артефакта
    }
}
